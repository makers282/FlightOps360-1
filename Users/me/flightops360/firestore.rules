
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can only read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Company Profile: Public read, authenticated write (likely admin only in future)
    match /companyProfile/{profileId} {
      allow read: if true; // Publicly readable
      allow write: if request.auth != null; // TODO: Restrict to admin
    }

    // Fleet: Public read, authenticated write
    match /fleet/{aircraftId} {
      allow read: if true; // Temporarily public for dashboard functionality
      allow write: if request.auth != null; // TODO: Restrict to admin/authorized roles
    }

    // Aircraft Rates: Public read, authenticated write
    match /aircraftRates/{rateId} {
      allow read: if true; // Temporarily public
      allow write: if request.auth != null; // TODO: Restrict to admin
    }

    // Aircraft Performance Data: Public read, authenticated write
    match /aircraftPerformanceData/{perfId} {
      allow read: if true; // Temporarily public
      allow write: if request.auth != null; // TODO: Restrict to admin/authorized roles
    }

    // Component Times: Public read, authenticated write
    match /aircraftComponentTimes/{compTimeId} {
      allow read: if true; // Temporarily public for dashboard functionality
      allow write: if request.auth != null; // TODO: Restrict to authorized roles or system
    }

    // Maintenance Tasks: Public read, authenticated write
    match /maintenanceTasks/{taskId} {
      allow read: if true; // Temporarily public for dashboard functionality
      allow write: if request.auth != null; // TODO: Restrict to authorized roles
    }

    // Aircraft Discrepancies: Public read, authenticated write
    match /aircraftDiscrepancies/{discrepancyId} {
      allow read: if true; // Temporarily public for dashboard functionality
      allow write: if request.auth != null; // TODO: Restrict to authorized roles
    }

    // MEL Items: Public read, authenticated write
    match /aircraftMelItems/{melId} {
      allow read: if true; // Temporarily public for dashboard functionality
      allow write: if request.auth != null; // TODO: Restrict to authorized roles
    }

    // Aircraft Block Outs: Public read, authenticated write
    match /aircraftBlockOuts/{blockOutId} {
        allow read: if true; // Public for calendar display
        allow write: if request.auth != null; // TODO: Restrict to authorized roles
    }

    // Quotes: Authenticated read/write
    match /quotes/{quoteId} {
      allow read, write: if request.auth != null; // TODO: Refine - who can read/write specific quotes?
    }

    // Customers: Authenticated read/write
    match /customers/{customerId} {
      allow read, write: if request.auth != null; // TODO: Refine based on roles
    }

    // Trips: Public read, authenticated write
    match /trips/{tripId} {
      allow read: if true; // Temporarily public for dashboard functionality
      allow write: if request.auth != null; // TODO: Refine based on roles
    }

    // Flight Logs: Public read, authenticated write
    match /flightLogs/{flightLogId} {
      allow read: if true; // Temporarily public for dashboard/trip details
      allow write: if request.auth != null; // TODO: Refine - who can write flight logs?
    }

    // Crew Members: Public read, authenticated write
    match /crewMembers/{crewMemberId} {
      allow read: if true; // Temporarily public for dashboard functionality
      allow write: if request.auth != null; // TODO: Restrict to admin/authorized roles
    }

    // Roles: Authenticated read, restricted write (e.g., admin only)
    match /roles/{roleId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: CRITICAL - Restrict to admin roles for creating/modifying roles
      // Example for admin only write:
      // allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Crew Documents: Authenticated read/write
    match /crewDocuments/{documentId} {
        allow read, write: if request.auth != null; // TODO: Allow specific crew/admins to read/write
    }

    // Aircraft Documents: Authenticated read/write (Storage rules handle public file access)
    match /aircraftDocuments/{documentId} {
        allow read, write: if request.auth != null; // TODO: Allow specific crew/admins to read/write
    }
     // Company Documents: Authenticated read/write (Storage rules can handle public file access if needed)
    match /companyDocuments/{documentId} {
        allow read, write: if request.auth != null; // TODO: Define roles for managing these
    }

    // Bulletins: Public read, authenticated write
    match /bulletins/{bulletinId} {
      allow read: if true; // Publicly readable for dashboard display
      allow write: if request.auth != null; // TODO: Restrict to admin/authorized roles for creating/editing
    }

    // Notifications: User-specific or role-based
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null; // TODO: Restrict to specific user or roles
      // Example for user-specific:
      // allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}

    