
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read from most collections
    // Write access is also granted to authenticated users for now,
    // but this should be refined based on specific app logic (e.g., only admins can write to 'fleet').
    match /fleet/{aircraftId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access, e.g., to admins
    }

    match /aircraftRates/{rateId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }

    match /aircraftPerformanceData/{perfId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }

    match /aircraftComponentTimes/{compId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }

    match /maintenanceTasks/{taskId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }

    match /aircraftDiscrepancies/{discrepancyId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }
    
    match /aircraftMelItems/{melId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null; // TODO: Restrict write access
    }

    match /flightLogs/{logId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null; // TODO: Restrict write access
    }

    match /customers/{customerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }

    match /quotes/{quoteId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }

    match /trips/{tripId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }
    
    match /aircraftBlockOuts/{blockOutId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }

    match /crewMembers/{crewMemberId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }
    
    match /users/{userId} {
      // Users can read their own data and admins (or specific roles) can read/write all user data.
      // For now, simple rule: users can read/write their own data.
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // TODO: Add admin access rule if needed: allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /roles/{roleId} {
      allow read: if request.auth != null; // All authenticated users can read roles
      allow write: if request.auth != null; // TODO: Restrict write to admins
    }

    match /companyProfile/{profileId} { // Assuming a single document for company profile
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write to admins
    }

    match /aircraftDocuments/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }

    match /crewDocuments/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }
    
    match /companyDocuments/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Restrict write access
    }

    match /bulletins/{bulletinId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null; // TODO: Restrict write access (e.g. to admin/editor roles)
    }

    match /notifications/{notificationId} {
        // Users can read their own notifications or global ones
        // Users can update (mark as read) their own notifications
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || resource.data.userId == null);
        allow update: if request.auth != null && request.auth.uid == resource.data.userId;
        // Write (create) is typically handled by backend flows/triggers, not direct client writes.
        // For admin-created global notifications, use specific admin rules.
        allow create: if request.auth != null; // TODO: Restrict to admins or backend processes
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId; // Users can delete their own
    }
  }
}
