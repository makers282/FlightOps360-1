
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection:
    // Users can only read and write their own document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Roles collection:
    // Allow authenticated users to read roles.
    // TODO: Restrict write access to admins only.
    match /roles/{roleId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TODO: Refine this, e.g., only admins
    }

    // Company Profile collection:
    // Generally, company profile might be readable by authenticated users,
    // writable only by admins.
    match /companyProfile/{profileId} { // profileId is usually 'main'
      allow read: if true; // Public read for dashboard
      allow write: if request.auth != null; // TODO: Refine to admins
    }

    // Fleet collection:
    // Aircraft data
    match /fleet/{aircraftId} {
      allow read: if true; // Public read for dashboard
      allow write: if request.auth != null; // TODO: Refine to admins or specific roles
    }
    
    // Aircraft Rates collection:
    // Rates associated with aircraft
    match /aircraftRates/{aircraftId} {
      allow read: if true; // Public read for dashboard
      allow write: if request.auth != null; // TODO: Refine to admins or specific roles
    }

    // Aircraft Performance Data collection:
    match /aircraftPerformanceData/{aircraftId} {
      allow read: if true; // Public read for dashboard
      allow write: if request.auth != null; // TODO: Refine to admins
    }
    
    // Aircraft Component Times collection
    match /aircraftComponentTimes/{aircraftId} {
        allow read: if true; // Public read for dashboard
        allow write: if request.auth != null; // Or specific roles like maintenance
    }

    // Maintenance Tasks collection
    match /maintenanceTasks/{taskId} {
        allow read: if true; // Public read for dashboard
        // Allow write if the user is authenticated (e.g., maintenance personnel)
        // TODO: Consider more granular control, e.g., only allow creating tasks for aircraft they manage
        allow write: if request.auth != null; 
    }
    
    // Aircraft Discrepancies collection
    match /aircraftDiscrepancies/{discrepancyId} {
      allow read: if true; // Public read for dashboard
      allow write: if request.auth != null; // TODO: Refine, e.g., pilots, maintenance
    }

    // Aircraft MEL Items collection
    match /aircraftMelItems/{melItemId} {
      allow read: if true; // Public read for dashboard
      allow write: if request.auth != null; // TODO: Refine
    }

    // Customers collection:
    // Customers might be viewable by sales/admin, writable by sales/admin
    match /customers/{customerId} {
      allow read: if true; // Public read for dashboard/quotes
      allow write: if request.auth != null; // TODO: Refine to sales/admin
    }

    // Quotes collection:
    match /quotes/{quoteId} {
      allow read: if true; // Public read for dashboard
      allow write: if request.auth != null; // TODO: Refine (e.g., sales can create/update their quotes)
    }

    // Trips collection:
    match /trips/{tripId} {
      allow read: if true; // Public read for dashboard
      allow write: if request.auth != null; // TODO: Refine (e.g., dispatch, admins)
    }

    // Crew Members collection:
    match /crewMembers/{crewMemberId} {
      allow read: if true; // Public read for dashboard and scheduling
      allow write: if request.auth != null; // TODO: Refine (e.g., HR, admins)
    }
    
    // Flight Logs collection
    match /flightLogs/{flightLogId} {
      allow read: if request.auth != null; // Only authenticated users can read logs
      allow write: if request.auth != null; // Only authenticated users can write logs (e.g., pilots for their flights)
      // TODO: Refine to ensure pilots can only write to logs for trips they are assigned to.
    }

    // Aircraft Block Outs collection
    match /aircraftBlockOuts/{blockOutId} {
      allow read: if true; // Public read for calendar display
      allow write: if request.auth != null; // TODO: Refine (e.g., dispatch, admins)
    }

    // Bulletins collection:
    // Bulletins might be publicly readable, but only writable by admins.
    match /bulletins/{bulletinId} {
      allow read: if true; // Publicly readable for dashboard
      allow write: if request.auth != null; // TODO: Refine to admins
    }
    
    // Notifications collection
    // Users can read their own notifications, and create them (implicitly through other actions).
    // Direct write might be limited.
    match /notifications/{notificationId} {
      allow read: if request.auth != null; // Allow authenticated users to read notifications (can be further refined to target user)
      allow update: if request.auth != null; // Allow marking as read/unread
      allow create, delete: if false; // Typically created by backend flows, deletion might be admin only or automatic
    }

    // Company Documents collection
    match /companyDocuments/{documentId} {
      allow read: if request.auth != null; // Authenticated users can read company docs
      allow write: if request.auth != null; // TODO: Refine to admins or specific roles
    }

    // Aircraft Documents collection
    // Rules are more complex here due to public file URLs from Storage.
    // The Firestore document itself might just store metadata.
    match /aircraftDocuments/{documentId} {
      allow read: if true; // Metadata might be publicly readable if fileURL is public
      allow write: if request.auth != null; // TODO: Refine who can manage these document records
    }

    // Crew Documents collection
    match /crewDocuments/{documentId} {
      allow read: if request.auth != null; // Authenticated users can read (e.g., their own, or admins read all)
      // TODO: Implement user-specific read/write rules or role-based access.
      // Example: allow read, write: if request.auth.uid == resource.data.crewMemberId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow write: if request.auth != null;
    }

  }
}
